=================================================== Method 1 =========================================
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int [] output = new int [n];
        output [0] = 1;
     // product of elements to the left of each index
        for(int i =1; i<n; i++){
            output [i] = output [i-1] * nums [i-1];
        }
    // product of elements to the right of each index
        int right =1;
        for (int i = n -1; i>=0; i--){
            output [i] = output [i] * right;
             right *= nums[i];
        }
        return output;
        }
        
========================================================= Method 2 ==============================================
    public int[] productExceptSelfPreComputation(int[] nums) {

        int n = nums.length;
        int [] left = new int [n];
        int [] right = new int [n];
        int [] output = new int [n];
        left [0]=1;
        for(int i =1; i<n; i++){
            left [i] = left [i-1] * nums [i-1];
        }

        right [n-1] =1;
        for (int i = n -2; i>=0; i--){
            right [i] = right [i+1] * nums[i+1];
        }

        for ( int  i =0; i<n; i++){
            output [i] = left[i] * right[i]; 
        }
        return output;
    }


===================================================== Method 3 ===================================================

    public int[] productExceptSelfBruteForce(int[] nums) {
        int n = nums.length;
        int [] output = new int [n];

        for ( int i=0; i<n; i++){
            int prod = 1;
            for (int j = 0; j<n; j++){
                if (  i!=j)prod *= nums[j];
            }
           output[i] = prod;
        }
        return output;
    }
}

class Node{
    int val; // for the data (Instance variable)
    Node next; // for the next node reference (Default value is null)
    Node prev; // for the prev node reference (Default value is null)
    // creating constructor
    Node (int val){//local variable
        this.val = val; // when instance var = local var, this is compulsory
    }
}
// class Node<T>{ //when we don't have idea what type of data is stroed.
//     T data;
//     Node<T> next;
// }
//Node<String>node = new Node<>("Apple");
//Node<Integer> node = new Node<>("100");

class MyLinkedList {
    int size; //total number of nodes
    Node head; //head contains the reference of the first node
    Node tail;
    
    public MyLinkedList() {
        size = 0;
    }
    
    public int get(int index) {
        if(index<0 || index>=size){
            return -1;
        }
        else{
            Node temp = head;
            for(int i = 0; i<index; i++){
                temp = temp.next;
            }
            return temp.val;
        }
    }
    
    public void addAtHead(int val) {
        // Create a New node
        Node node = new Node(val);
        size++;
        // no linkedList exists
        if (head == null){
            head = node;
            tail = node;
        }
        else{
            node.next = head;
            head.prev = node;
            head = node;
        }
    }
    
    public void addAtTail(int val) {
         // Create a New node
        Node node = new Node(val);
        size++;
        // no linkedList exists
        if (head == null){
            head = node;
            tail = node;
        }
        else{
            tail.next = node;
            node.prev = tail;
            tail = node; 
        }
    }
    
    public void addAtIndex(int index, int val) {
        if (index <0 || index>size){
            return; //invalid index
        }
        if(index==0){
            addAtHead(val);
        }
        else if(index == size){
            addAtTail(val);
        }
        else{
            Node node = new Node(val);
            Node temp = head;
            // add at mid
            for(int i = 0; i<index-1; i++){
                temp = temp.next;
            }
            node.next = temp.next;
            temp.next.prev = node;
            temp.next = node;
            node.prev = temp;
            size++;
        }
    }
    
    public void deleteAtIndex(int index) {
        if(index<0 || index>=size){
            return;
        }
        if(index==0){
            head = head.next;
        }
        else if(index == size-1){
            //last node
            tail = tail.prev;
            if(tail!=null){
                tail.next = null;
            }
            else{
                head = null;
            }
        }
        else{
            //delete in middle
            Node temp = head;
            for(int i = 0; i<index; i++){
                temp = temp.next;
            }
             temp.prev.next = temp.next;
             temp.next.prev = temp.prev;
        }
        size--;
    }
}

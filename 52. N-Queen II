class Solution {
    boolean board [][];
    public int totalNQueens(int n) {
    board = new boolean [n][n]; //chess board filled with false
    return helper (0, n);    
    }

    boolean willPlaceQueen(int row, int col){
        //case-1 above row
        for(int i = row; i>=0; i--){
            if(board [i][col]){
                return false; // can't place, move to the next column
            }
        }

        //case-2 left diagonal
        for(int i = row, j = col; i>=0 && j>=0; i--, j--){
            if(board[i][j]){
                return false;
            }
        }

        //case-3 right diagonal
        for(int i = row, j = col; i>=0 && j<board[0].length; i--, j++){
            if(board[i][j]){
                return false;
            }
        }
        return true;
    }

    int helper (int row, int n){
        if(row == n){
            return 1;
        }
        int count = 0;

        for(int col =0; col<n; col++){
            if(willPlaceQueen(row, col)){
                board[row][col]=true;
                count = count + helper(row+1, n);
                board[row][col] = false;
            }
        }
        return count;
    }
}

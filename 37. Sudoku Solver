class Solution {
    char [][] board;
    final int MAX = 9;
    boolean isPresentInRow( int row, char digit){
        for(int col = 0; col<MAX; col++){
            if(board[row][col] == digit){
                return true;
            }
        }
        return false;
    }
    boolean isPresentInCol( int col, char digit){
        for(int row = 0; row<MAX; row++){
            if(board[row][col] == digit){
                return true;
            }
        }
        return false;
    }
    boolean isPresentInSubGrid(int row, int col, char digit){
        int startRow = row - row%3;
        int startCol = col - col%3;
        for(int i = startRow; i<startRow+3; i++){
            for (int j = startCol; j<startCol+3; j++){
                if (board[i][j] == digit){
                    return true;
                }
            }
        }
            return false;
        
    }
    boolean isCorrectToPlaceDigit(int row, int col, char digit){
        return !isPresentInRow (row, digit) && !isPresentInCol(col,digit) && !isPresentInSubGrid( row, col, digit);
        //digit present in a row
        //digit presnt in a col
        //digit present in a sub grid
    }
    boolean solveSudoku ( int row, int col){
        //I reach to the end col so move to the next row
        if(col==MAX){
            row = row+1;
            col = 0;
        }
        if (row==MAX){
        return true;
        }
        // if cell is not empty..move to the nextt col
        if (board[row][col] != '.'){
            return solveSudoku(row, col+1);
        }
        // on empty cells I can place value b/w 1 to 9
        for (int i = 1; i<=MAX; i++){
            //checking can I place a digit in a cell
            if (isCorrectToPlaceDigit(row,col,(char) (i + '0'))){
            board[row][col] = (char)(i + '0');//place a digit on a cell
             //after filling the celll
                //move to the next column
                boolean result = solveSudoku (row, col+1);
                if (result) {
                    return true;
                }
                //backTrack(remove last digit)
                board[row][col] = '.';
            }
        } //loop exhaust
        return false;
    }
    public void solveSudoku(char[][] board) {
        this.board = board;
        solveSudoku (0,0);
    }
}

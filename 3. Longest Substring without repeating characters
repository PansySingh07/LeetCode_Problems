class Solution {
    public int lengthOfLongestSubstring(String s) {
      Set<Character> set = new HashSet<>(); // set is used for unique things
      int maxLength = 0;
      int left = 0;

      for ( int right = 0; right<s.length(); right++){
        while (set.contains(s.charAt(right))){
            //remove the left most
            set.remove(s.charAt(left));
            left++;
        }

        set.add(s.charAt(right));
        maxLength = Math.max(maxLength, right - left+1); //right 0 left - 1    is for the length of new array
      } 
    return maxLength; 
    }
}

// ========================================================= slide window method ====================================================================
class Solution {
    public int lengthOfLongestSubstring(String s) {
int i = 0;
int j = 0;
int max = 0;
int[] hashset = new int[128]; //default fill with 0 [128 skil value last pos]
while(j<s.length()){
    char singleChar = s.charAt(j);
    hashset[singleChar]++; // hashSet[ ascii Value of cahr] hashset [a] hashset [97] ++ = 0+1
    while(hashset[singleChar]>1){ // character appear more than one
        char leftChar = s.charAt(i);
        hashset[leftChar]--;
        i++; //slide the window(left to right move)
    }
    max = Math.max(max, j-i+1);
    j++;
}
    return max;
    }
    }



